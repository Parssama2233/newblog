---
import Layout from './Layout.astro';
import CategoriesList from '@components/CategoriesList.astro';
import ProfileCard from '@components/layout/ProfileCard.astro';
import ContactLinks from '@components/layout/ContactLinks.astro';
import FooterCopy from '@components/layout/FooterCopy.astro';
import siteConfig from '@config/site';
import {
  type PostEntry,
  getCategoryConfig,
  getCategoryPathSegment,
  getPostCategory,
  getPostImage,
  getPostPermalink,
  getPageByTranslationKey,
  getPagePermalink,
  groupPostsByLocales,
} from '@lib/content';
import { DEFAULT_LOCALE, SUPPORTED_LOCALES, isDefaultLocale } from '@lib/language';
import { formatDate } from '@lib/format';
import { ensureTrailingSlash } from '@utils/url';
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from '@i18n/utils';

const {
  title,
  description,
  keywords,
  categoryId,
  posts,
  page,
}: {
  title?: string;
  description?: string;
  keywords?: string;
  categoryId?: string;
  posts: PostEntry[];
  page: {
    url: {
      current: string;
      prev?: string;
      next?: string;
    };
  };
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
const aboutHref = await (async () => {
  const localized = await getPageByTranslationKey('about', lang);
  if (localized) {
    return getPagePermalink(localized);
  }

  const fallback = await getPageByTranslationKey('about', DEFAULT_LOCALE);
  if (fallback) {
    return getPagePermalink(fallback);
  }

  return translatePath('/about');
})();

const prevPageUrl = page.url.prev
  ? ensureTrailingSlash(page.url.prev)
  : undefined;
const nextPageUrl = page.url.next
  ? ensureTrailingSlash(page.url.next)
  : undefined;

const categoriesSet = new Set(posts.map((post) => getPostCategory(post)));
const shouldShowCategories = !categoryId && categoriesSet.size > 1;

const categoryMeta = categoryId ? getCategoryConfig(categoryId) : null;

const contactLinks = (() => {
  const links: Array<{ id?: string; name: string; url: string; icon?: string; iconSvg?: string }> = [];

  const resolveRecordValue = (record: Record<string, string> | undefined): string | null => {
    if (!record) {
      return null;
    }

    return (
      record[lang] ??
      record[DEFAULT_LOCALE] ??
      record[siteConfig.defaultLanguage] ??
      Object.values(record).find((value) => Boolean(value)) ??
      null
    );
  };

  const resolveUrl = (value: string | Record<string, string>): string | null => {
    if (typeof value === 'string') {
      return value;
    }
    return resolveRecordValue(value);
  };

  (siteConfig.contactLinks ?? []).forEach((entry) => {
    const label =
      resolveRecordValue(entry.label) ??
      entry.id;
    const url = resolveUrl(entry.url);

    if (!label || !url) {
      return;
    }

    links.push({
      id: entry.id,
      name: label,
      url,
      icon: entry.icon,
      iconSvg: entry.iconSvg,
    });
  });

  if (
    siteConfig.features.rss &&
    !links.some((link) => link.id?.toLowerCase() === 'rss')
  ) {
    const basePrefix = isDefaultLocale(lang) ? '' : `/${lang}`;
    links.unshift({
      id: 'rss',
      name: 'RSS',
      url: `${basePrefix}/rss.xml`,
      icon: 'üì∞',
    });
  }

  return links;
})();

const projectLinks = (siteConfig.projects ?? [])
  .map((project) => {
    if (!project?.url) {
      return null;
    }

    const label =
      project.label?.[lang] ??
      project.label?.[DEFAULT_LOCALE] ??
      project.label?.[siteConfig.defaultLanguage] ??
      project.id;

    if (!label) {
      return null;
    }

    return {
      id: project.id,
      url: project.url,
      label,
      icon: project.icon,
      iconSvg: project.iconSvg,
    };
  })
  .filter((project): project is NonNullable<typeof project> => Boolean(project));

const postsWithMetadata = posts.map((post) => {
  const category = getPostCategory(post);
  const meta = siteConfig.categories[category];
  const categoryLabel =
    meta?.label?.[lang] ??
    meta?.label?.[DEFAULT_LOCALE] ??
    category;

  return {
    url: getPostPermalink(post),
    title: post.data.h1 ?? post.data.title,
    announcement: post.data.announcement,
    category,
    categoryLabel,
    date: formatDate(post.data.date, lang),
    image: getPostImage(post),
  };
});

const currentCategoryLabel = categoryMeta
  ? categoryMeta.label?.[lang] ??
    categoryMeta.label?.[DEFAULT_LOCALE] ??
    categoryId
  : t('ui.all_posts');
const categoryIcon = categoryMeta?.icon ?? 'üìÇ';
const categoryDescription = categoryMeta?.description?.[lang] ?? null;

const currentPageNumber = page.currentPage ?? 1;
const postsPerPage = Math.max(1, siteConfig.postsPerPage || 1);
const categorySegment = categoryId ? getCategoryPathSegment(categoryId) : null;

const buildBasePathForLocale = (localeCode: string): string => {
  const isDefault = localeCode.toLowerCase() === DEFAULT_LOCALE.toLowerCase();
  const categoryPath = categorySegment ? `/${categorySegment}` : '';
  const basePath = isDefault ? categoryPath || '/' : `/${localeCode}${categoryPath}`;
  return ensureTrailingSlash(basePath);
};

const buildPathForLocale = (localeCode: string): string => {
  const basePath = buildBasePathForLocale(localeCode);
  if (currentPageNumber <= 1) {
    return basePath;
  }

  const pagedPath = `${basePath}${currentPageNumber}`;
  return ensureTrailingSlash(pagedPath);
};

const localeGroups = await groupPostsByLocales(SUPPORTED_LOCALES, {
  category: categoryId,
});

const alternateEntries = new Map<string, { lang: string; path: string }>();

const registerAlternate = (localeCode: string) => {
  const normalizedCode = localeCode.toLowerCase();
  if (alternateEntries.has(normalizedCode)) {
    return;
  }

  const resolvedCode =
    SUPPORTED_LOCALES.find((candidate) => candidate.toLowerCase() === normalizedCode) ??
    localeCode;

  alternateEntries.set(normalizedCode, {
    lang: resolvedCode,
    path: buildPathForLocale(resolvedCode),
  });
};

registerAlternate(lang);

for (const group of localeGroups) {
  const totalPages = Math.ceil(group.posts.length / postsPerPage);
  if (totalPages === 0) {
    continue;
  }

  if (currentPageNumber > totalPages) {
    continue;
  }

  registerAlternate(group.lang);
}

const alternates = Array.from(alternateEntries.values()).map(({ lang: localeCode, path }) => ({
  lang: localeCode,
  url: new URL(path, siteConfig.siteUrl).toString(),
}));

const defaultAlternate = alternateEntries.get(DEFAULT_LOCALE.toLowerCase());
if (defaultAlternate) {
  alternates.push({
    lang: 'x-default',
    url: new URL(defaultAlternate.path, siteConfig.siteUrl).toString(),
  });
}
---
<Layout
  title={title}
  description={description}
  keywords={keywords}
  prevPageUrl={prevPageUrl}
  nextPageUrl={nextPageUrl}
  alternates={alternates}
>
  <div class="content">
    <aside class="aside aside--left">
      <div class="tags tags--desktop">
        <div class="tags__top"><span class="icon">üè∑Ô∏è</span> {t('ui.categories')}</div>
        <CategoriesList />
      </div>
    </aside>

    <div class="content-center">
     <form class="search form hidden" onsubmit="event.preventDefault();">
        <div class="search__top">
          <span class="search__top-icon">üîé</span> {t('ui.search')}
        </div>
        <input
          type="text"
          class="input"
          placeholder={t('ui.search_placeholder')}
        />
      </form>
      <div id="search-results" style="display: none;"></div>

      <div class="tags tags--mob">
        <div class="tags__top"><span class="icon">üè∑Ô∏è</span> {t('ui.categories')}</div>
        <CategoriesList />
      </div>

      <div class="filter">
        <div class="filter__categories categories">
          <div class="categories__wrapper">
            <span aria-hidden="true">{categoryIcon}</span>
            <h1 class="categories__wrapper">{currentCategoryLabel}</h1>
          </div>

          {categoryDescription && (
            <p class="categories__description">{categoryDescription}</p>
          )}

          <div class="categories__content"></div>
        </div>
      </div>

      <div class="posts-list">
        {postsWithMetadata.length === 0 && (
          <div class="no-posts">{t('ui.no_posts')}</div>
        )}

        {postsWithMetadata.map((post) => (
          <a href={post.url} class="post">
            {shouldShowCategories && siteConfig.categories[post.category] && (
              <div class="post__category category">
                <div class="category__item category__item--light-blue">{siteConfig.categories[post.category].icon} {post.categoryLabel}</div>
              </div>
            )}

            <div class="post__date_right category">
              <div class="category__item date__item--light-blue">{post.date}</div>
            </div>

            {post.image && (
              <div class="post__thumbnail">
                <picture>
                  <img src={post.image} alt="" />
                </picture>
              </div>
            )}

            <div class="post__content">
              <h2 class="post__title">{post.title}</h2>
              {post.announcement && (
                <div class="post__summary">{post.announcement}</div>
              )}
            </div>
          </a>
        ))}
      </div>

      <div class="pagination">
        {page.url.prev ? (
          <a class="pagination__link" href={page.url.prev}>‚Üê {t('ui.prev')}</a>
        ) : (
          <span class="pagination__link disabled" style="visibility: hidden;">{t('ui.prev')}</span>
        )}

        <span class="pagination__text">{page.currentPage} / {page.lastPage}</span>

        {page.url.next ? (
          <a class="pagination__link" href={page.url.next}>{t('ui.next')} ‚Üí</a>
        ) : (
          <span class="pagination__link disabled" style="visibility: hidden;">{t('ui.next')}</span>
        )}
      </div>

    </div>

    <div class="sidebar">
      <ProfileCard
        className="sidebar__profile"
        title={t('ui.profile')}
        description={t('ui.description')}
        profileHref={aboutHref}
        avatarSrc={siteConfig.author.avatar}
        alt={t('name')}
      />

      {projectLinks.length > 0 && (
        <div class="service sidebar__service">
          <div class="title service__title">
            <span class="icon">üåü</span> {t('ui.projects')}
          </div>
          <div class="box-links service__box-links">
            {projectLinks.map((project) => (
              <a
                href={project.url}
                target="_blank"
                rel="noopener noreferrer"
                class="box-links__link"
                data-project-id={project.id}
              >
                {project.iconSvg ? (
                  <span class="icon" aria-hidden="true" set:html={project.iconSvg}></span>
                ) : project.icon ? (
                  <span class="icon" aria-hidden="true">{project.icon}</span>
                ) : null}
                <span class="box-links__link-name">{project.label}</span>
              </a>
            ))}
          </div>
        </div>
      )}

      <ContactLinks className="sidebar__contact" title={t('ui.contacts')} links={contactLinks} />

      <FooterCopy className="sidebar__footer" />
    </div>
  </div>
</Layout>
