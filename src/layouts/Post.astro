---
import Layout from './Layout.astro';
import AIWarning from '@components/AIWarning.astro';
import FloatingTOC from '@components/FloatingTOC.astro';
import siteConfig from '@config/site';
import {
  type PostEntry,
  getCategoryConfig,
  getCategoryPath,
  getPostImage,
  getPostPermalink,
  getPostTranslations,
  getPostLanguage,
  getPostCategory,
  getPageByTranslationKey,
  getPagePermalink,
} from '@lib/content';
import { formatDate } from '@lib/format';
import { DEFAULT_LOCALE } from '@lib/language';
import { useTranslations, useTranslatedPath } from '@i18n/utils';

const {
  entry,
  Content,
  headings = [],
}: {
  entry: PostEntry;
  Content: any;
  headings: Array<{ depth: number; slug: string; text: string }>;
} = Astro.props;

const lang = getPostLanguage(entry);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
const aboutHref = await (async () => {
  const localized = await getPageByTranslationKey('about', lang);
  if (localized) {
    return getPagePermalink(localized);
  }

  const fallback = await getPageByTranslationKey('about', DEFAULT_LOCALE);
  if (fallback) {
    return getPagePermalink(fallback);
  }

  return translatePath('/about');
})();

const publishedDate = formatDate(entry.data.date, lang, 'compact');
const heroImage = getPostImage(entry);
const categoryKey = getPostCategory(entry);
const categoryConfig = getCategoryConfig(categoryKey);
const categoryLabel =
  categoryConfig &&
  (categoryConfig.label?.[lang] ??
    categoryConfig.label?.[DEFAULT_LOCALE] ??
    categoryKey);

const translations = await getPostTranslations(entry);
const publishedIso = entry.data.date?.toISOString?.() ?? null;
const authorName =
  siteConfig.author.name[lang] ??
  siteConfig.author.name[DEFAULT_LOCALE] ??
  Object.values(siteConfig.author.name)[0];

const alternates = (() => {
  const linkMap = new Map<string, string>();

  const registerAlternate = (localeCode: string, permalink: string) => {
    if (!localeCode || !permalink) {
      return;
    }

    if (!linkMap.has(localeCode)) {
      const href = new URL(permalink, siteConfig.siteUrl).toString();
      linkMap.set(localeCode, href);
    }
  };

  translations.forEach((item) => {
    registerAlternate(getPostLanguage(item), getPostPermalink(item));
  });

  registerAlternate(lang, getPostPermalink(entry));

  const entries = Array.from(linkMap.entries()).map(([localeCode, href]) => ({
    lang: localeCode,
    url: href,
  }));

  const defaultHref = linkMap.get(DEFAULT_LOCALE) ?? linkMap.get(lang);
  if (defaultHref) {
    entries.push({ lang: 'x-default', url: defaultHref });
  }

  return entries;
})();
---
<Layout
  title={entry.data.title}
  description={entry.data.description}
  image={heroImage}
  alternates={alternates.length ? alternates : undefined}
  ogType="article"
  publishedAt={publishedIso ?? undefined}
  authorName={authorName}
  section={categoryLabel ?? undefined}
  enableCodeHighlight
>
  <div class="article-wrap">
    <div class="article">
      <article>
        <div class="article__head">
          <h1 class="h1">{entry.data.h1 ?? entry.data.title}</h1>

          <div class="article__nav">
            <div class="article__nav-top">
              <div class="article__author author">
                <div class="author__photo">
                  <a href={aboutHref}>
                    <picture>
                      <img src={siteConfig.author.avatar} alt={t('name')} />
                    </picture>
                  </a>
                </div>

                <div class="author__name">
                  <a href={aboutHref} class="author__name">
                    {t('name')}
                  </a>
                </div>
              </div>

              {entry.data.date && (
                <div class="article__date">{publishedDate}</div>
              )}

              {categoryLabel && (
                <div>
                  <a
                    class="category__item category__item--light-blue"
                    href={translatePath(getCategoryPath(categoryKey))}
                  >
                    {categoryConfig?.icon} {categoryLabel}
                  </a>
                </div>
              )}
            </div>
          </div>
        </div>

        {entry.data.aiGenerated && <AIWarning />}

        <div class="text-block article__text-block">
          <Content />
        </div>

        {siteConfig.features.postNavigation && (
          <div class="post-navigation">
            <a href={translatePath('/')}>← {t('ui.back')}</a>
            <a href="#" class="scroll-top">↑ {t('ui.top')}</a>
          </div>
        )}
      </article>
    </div>
  </div>

  {headings.length > 0 && <FloatingTOC headings={headings} lang={lang} />}

  {siteConfig.features.imageLightbox && (
    <>
      <div id="lightbox" class="lightbox" data-site-url={siteConfig.siteUrl}>
        <span class="close">&times;</span>
        <img class="lightbox-content" />
      </div>
      <script type="module" src="/js/lightbox.js"></script>
    </>
  )}

  <style>
    .lightbox {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
      align-items: center;
      justify-content: center;
    }

    .lightbox-content {
      margin: auto;
      display: block;
      max-width: 100%;
      max-height: 80%;
      border-radius: 5px;
      cursor: zoom-out;
    }

    .close {
      position: absolute;
      top: 20px;
      right: 30px;
      color: #f1f1f1;
      font-size: 40px;
      font-weight: bold;
      cursor: pointer;
    }
  </style>
</Layout>
