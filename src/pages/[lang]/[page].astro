---
import PageLayout from '@layouts/Page.astro';
import siteConfig from '@config/site';
import {
  findTopLevelPage,
  getPageLanguage,
  getPagePermalink,
  getPageTranslations,
  getTopLevelPageDescriptors,
} from '@lib/content';
import {
  DEFAULT_LOCALE,
  isSupportedLocale,
  normalizeLocale,
} from '@lib/language';

export async function getStaticPaths() {
  const descriptors = await getTopLevelPageDescriptors();

  return descriptors
    .filter((descriptor) => descriptor.lang !== DEFAULT_LOCALE)
    .map((descriptor) => ({
      params: { lang: descriptor.lang, page: descriptor.slug },
      props: { translationKey: descriptor.translationKey },
    }));
}

const { lang: rawLang, page } = Astro.params;

if (!rawLang || !isSupportedLocale(rawLang) || rawLang === DEFAULT_LOCALE) {
  return Astro.redirect('/404');
}

const lang = normalizeLocale(rawLang);

const { translationKey } = Astro.props as { translationKey: string };

const entry = await findTopLevelPage({
  translationKey,
  lang,
  slug: page,
});

if (!entry) {
  return Astro.redirect(`/${lang}`);
}

const translations = await getPageTranslations(entry);

const alternates = (() => {
  const linkMap = new Map<string, string>();

  const registerAlternate = (localeCode: string, permalink: string) => {
    if (!localeCode || !permalink) {
      return;
    }

    if (!linkMap.has(localeCode)) {
      const href = new URL(permalink, siteConfig.siteUrl).toString();
      linkMap.set(localeCode, href);
    }
  };

  translations.forEach((candidate) => {
    registerAlternate(getPageLanguage(candidate), getPagePermalink(candidate));
  });

  const currentLang = getPageLanguage(entry);
  registerAlternate(currentLang, getPagePermalink(entry));

  const entries = Array.from(linkMap.entries()).map(([localeCode, href]) => ({
    lang: localeCode,
    url: href,
  }));

  const defaultHref = linkMap.get(DEFAULT_LOCALE) ?? linkMap.get(currentLang);
  if (defaultHref) {
    entries.push({ lang: 'x-default', url: defaultHref });
  }

  return entries;
})();

const { Content } = await entry.render();
---
<PageLayout entry={entry} Content={Content} alternates={alternates} />
