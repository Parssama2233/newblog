---
import siteConfig from '@config/site';
import { getOgLocale, resolveLocaleDefinition } from '@config/locales';
import { DEFAULT_LOCALE, listNonDefaultLocales } from '@lib/language';

type AlternateLink = {
  lang: string;
  pathname: string;
};

interface PageHeadProps {
  lang: string;
  title: string;
  description?: string;
  keywords?: string;
  canonicalUrl: string;
  alternates: AlternateLink[];
  prev?: string;
  next?: string;
  ogImage: string;
  twitterHandle?: string;
  baseDomain: string;
  fallbackDescription: string;
  enableCodeHighlight?: boolean;
  ogType?: 'website' | 'article';
  publishedAt?: string;
  modifiedAt?: string;
  authorName?: string;
  section?: string;
}

const {
  lang,
  title,
  description,
  keywords,
  canonicalUrl,
  alternates,
  prev,
  next,
  ogImage,
  twitterHandle,
  baseDomain,
  fallbackDescription,
  enableCodeHighlight = false,
  ogType = 'website',
  publishedAt,
  modifiedAt,
  authorName,
  section,
}: PageHeadProps = Astro.props;

const currentLocaleDefinition = resolveLocaleDefinition(lang);
const siteTitle =
  siteConfig.title[currentLocaleDefinition.code] ??
  siteConfig.title[DEFAULT_LOCALE] ??
  Object.values(siteConfig.title)[0];
const descriptionContent = description ?? fallbackDescription;
const rssTitleDefault =
  siteConfig.title[DEFAULT_LOCALE] ??
  siteConfig.title[currentLocaleDefinition.code] ??
  Object.values(siteConfig.title)[0];
const ogLocale = getOgLocale(currentLocaleDefinition.code);
const isArticle = ogType === 'article';
const articleAuthor =
  authorName ??
  siteConfig.author.name[currentLocaleDefinition.code] ??
  siteConfig.author.name[DEFAULT_LOCALE] ??
  Object.values(siteConfig.author.name)[0];
const publishedTime = publishedAt ?? null;
const modifiedTime = modifiedAt ?? publishedTime;

---
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
  <meta http-equiv="X-Content-Type-Options" content="nosniff" />
  <meta name="referrer" content="strict-origin-when-cross-origin" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="format-detection" content="telephone=no" />
  <meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
  <meta name="theme-color" content="#1a1a1a" media="(prefers-color-scheme: dark)" />

  <script is:inline src="/js/theme.js"></script>

  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link rel="stylesheet" href="/css/style.css" />
  {enableCodeHighlight && (
    <>
      <link rel="preconnect" href="https://cdnjs.cloudflare.com/" />
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css" />
      <link rel="stylesheet" href="https://unpkg.com/@highlightjs/cdn-assets@11.4.0/styles/base16/tomorrow-night.min.css" />
    </>
  )}
  <link rel="manifest" href="/manifest.webmanifest" />
  {enableCodeHighlight && (
    <script defer src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  )}
  <script type="module" src="/js/main.js"></script>

  <title>{title}</title>

  {description && <meta name="description" content={description} />}
  {keywords && <meta name="keywords" content={keywords} />}

  <link rel="canonical" href={canonicalUrl} />

  {alternates.map(({ lang: alternateLang, pathname }) => {
    const normalizedLang = alternateLang.toLowerCase();
    const href = new URL(pathname, baseDomain).toString();

    if (normalizedLang === 'x-default') {
      return <link rel="alternate" hreflang="x-default" href={href} />;
    }

    const alternateDefinition = resolveLocaleDefinition(alternateLang);
    const hreflang = alternateDefinition.langTag ?? alternateDefinition.code;

    return <link rel="alternate" hreflang={hreflang} href={href} />;
  })}

  {prev && <link rel="prev" href={prev} />}
  {next && <link rel="next" href={next} />}

  <meta property="og:title" content={title} />
  <meta property="og:description" content={descriptionContent} />
  <meta property="og:url" content={canonicalUrl} />
  <meta property="og:image" content={ogImage} />
  <meta property="og:type" content={ogType} />
  <meta property="og:site_name" content={siteTitle} />
  <meta property="og:locale" content={ogLocale} />
  {isArticle && (
    <>
      {publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )}
      {modifiedTime && (
        <meta property="article:modified_time" content={modifiedTime} />
      )}
      <meta property="article:author" content={articleAuthor} />
      {section && <meta property="article:section" content={section} />}
      <meta name="author" content={articleAuthor} />
    </>
  )}

  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={descriptionContent} />
  <meta name="twitter:image" content={ogImage} />
  {twitterHandle && <meta name="twitter:creator" content={twitterHandle} />}

  {siteConfig.features.rss && (
    <>
      <link
        rel="alternate"
        type="application/rss+xml"
        href="/rss.xml"
        title={`${rssTitleDefault} RSS feed`}
      />
      {listNonDefaultLocales()
        .map((code) => (
          <link
            rel="alternate"
            type="application/rss+xml"
            href={`/${code}/rss.xml`}
            title={`${siteConfig.title[code] ?? rssTitleDefault} RSS feed`}
          />
        ))}
    </>
  )}

  {siteConfig.seo.googleAnalytics && (
    <>
      <script async src={`https://www.googletagmanager.com/gtag/js?id=${siteConfig.seo.googleAnalytics}`}></script>
      <script is:inline>
        {`window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', '${siteConfig.seo.googleAnalytics}');`}
      </script>
    </>
  )}
</head>
